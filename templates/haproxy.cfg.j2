global
    # TODO rehacer política de logs,
    #  expulsar logs por red
    #  implementar en el depósito de logs un analizador
    log /dev/log    local0
    log /dev/log    local1 notice
    # log 127.0.0.1 local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    # preventing "unable to load default 1024 bits DH parameter for certificate"
    tune.ssl.default-dh-param 2048

# A "defaults" section sets default parameters for all other sections following its declaration.
defaults
    log global
    mode    http
    option  httplog
    option  log-health-checks
    # option    dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    # para poder aprovechar mejor maxconn
    # ver http://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-http-reuse
    http-reuse safe

    # http://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-no%20option%20persist
    option persist

    # http://cbonte.github.io/haproxy-dconv/1.7/configuration.html#option%20redispatch
    # The option redispatch enables session redistribution in case of
    # connection failures.
    # So session stickness is overriden if a VPS goes down.
    option redispatch

    # https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-http-load-balancing-on-an-ubuntu-vps#configure-logging-for-haproxy
    # The retries directive sets the number of retries to perform on a
    # VPS after a connection failure
    retries 3

    # option httplog
    # enables logging of various values of an HTTP session, including
    # HTTP requests, session status, connection numbers, source address,
    # and connection timers among other values.


    # option dontlognull
    #  disables logging of null connections, meaning that HAProxy will
    #  not log
    # connections wherein no data has been transferred. This is not
    # recommended for environments such as
    # web applications over the Internet where null connections could
    # indicate malicious activities such as
    # open port-scanning for vulnerabilities.

    # disabled

# A "frontend" section describes a set of listening sockets accepting client
# connections.

{% for f in frontendshttp %}
frontend http-in-{{ f.address | default(default_frontend_address) | regex_replace('\*','STAR') | regex_replace('([^a-zA-Z0-9.])', 'X') }}-{{ f.port | default (default_frontend_port) }}
    bind {{ f.address | default(default_frontend_address) }}:{{ f.port | default (default_frontend_port) }}
    default_backend {{ backend.name }}
    option httplog

    # para checks
    monitor-uri /haproxy?status
    # la compresíon debería se estudiada si hace falta
    # cuando se  ponga un nginx intercalado
    compression algo gzip
    compression type text/html text/plain text/javascript application/javascript application/xml text/css

    # Para ignorar presisencia en assets
    # requiere definir una ACL
    # y saber dónde están los assets :D
    # http://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-ignore-persist
    # ignore-persist

    # duplicamos la cantidad máxima de conexiones, default 2000
    maxconn {{ f.maxconn | default(default_frontend_maxconn) }}
    # The maxconn parameter specifies the maximum number of concurrent
    #  connections for the service.
    #  By default, the maximum is 2000.
    # Proxies will stop accepting connections when this limit is reached.

{% if (certbot != False) and (f.port | default (default_frontend_port) | string == '80') %}
    # Let's encrypt is going to ask this URI
    acl le-http-challenge path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if le-http-challenge

backend letsencrypt
    # this backend starts disabled in order to avoid the syn-ack timers waiting
    #  for a non existing server.
    # For enabling the challenging use the web admin or the socket interface
    # echo "set server letsencrypt/certbot state ready" | socat /run/haproxy/admin.sock
    server certbot 127.0.0.1:{{ certbot.http01_port | default(default_certbot_http01_port)}} disabled

{% endif %}
{% endfor %}


{% for f in frontendshttps %}
frontend https-in-{{ f.address | default(default_frontendhttps_address) | regex_replace('\*','STAR') | regex_replace('([^a-zA-Z0-9.])', 'X') }}-{{ f.port | default (default_frontendhttps_port) }}
    # cat /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem  > testcert.pem
    bind {{ f.address | default(default_frontendhttps_address) }}:{{ f.port | default (default_frontendhttps_port) }} ssl crt {{ f.crtdir | default(default_frontendhttps_crtdir) }}/{{ f.crtfile | default(default_frontendhttps_crtfile) }}
    default_backend {{ backend.name }}

    # para checks
    monitor-uri /centro_status
    option httplog

    # para checks
    monitor-uri /haproxy?status

    # duplicamos la cantidad máxima de conexiones, default 2000
    maxconn {{ f.maxconn | default(default_frontendhttps_maxconn) }}
    # The maxconn parameter specifies the maximum number of concurrent
    #  connections for the service.
    #  By default, the maximum is 2000.
    # Proxies will stop accepting connections when this limit is reached.

{% if (certbot != False) and (f.port | default (default_frontend_port) | string == '443') %}
    # Let's encrypt is going to ask this URI
    acl le-http-challenge path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if le-http-challenge

{% endif %}
{% endfor %}

# A "backend" section describes a set of servers to which the proxy will connect
# to forward incoming connections.
backend {{ backend.name }}
    option forwardfor except 127.0.0.1

    # nocache agrega Cache-control: private que implica:
    #.
    # Indicates that all or part of the response message is intended for
    # a single user and MUST NOT be cached by a shared cache. This
    # allows an origin server to state that the specified parts of the
    # response are intended for only one user and are not a valid
    # response for requests by other users. A private (non-shared) cache
    # MAY cache the response.
    # https://tools.ietf.org/html/rfc2616#page-108a
    # .
    # maxidle se usa para hacer caducar la cookie, se renuev
    # el timestamp periodicamente
    # http://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-cookie
    cookie {{ backend.cookie.name }} insert nocache maxidle {{ backend.cookie.maxidle }}
    # cookie WEBSVR insert nocache maxidle 100m httponly domain 192.168.0.18 attr "SameSite=Strict"

    # ajustes para política de cada backend server (detalles abajo)
{% if backend.default_server_settings | default(default_default_server_settings) is not false %}
    default-server {% for set in backend.default_server_settings | default(default_default_server_settings) %}{{ lookup('dict', set).key }} {{ lookup('dict', set).value }} {% endfor %}
{% endif %}


{% for name, s in ( backend.servers | default({}) ).items() %}    server  {{ name }} {{ s.address | default(name) }}:{{ s.port | default(default_server.port) }} weight {{ s.weight | default(default_server.weight) }}
{%- if s.maxconn is defined %} maxconn {{ s.maxconn | default('512') }}{% endif %}
 cookie {{ s.cookie | default( (name + '-' + (s.address | default(name)) ) | hash('sha1') ) }} check
{% endfor %}

    # la siguiente es información relativa a los checks para validar el
    # estado de los backends (health check)
    # https://www.haproxy.com/documentation/aloha/7-0/traffic-management/lb-layer7/health-checks/
    # The check  option flags a server for periodic healthchecks
    # to ensure that it is available and able receive and send data and take session requests.

    #     inter parameter sets the interval between two consecutive
    #         health checks. If not specified, the default value is 2s.
    #     fastinter parameter sets the interval between two consecutive
    #         health checks when the server is in any of the transition
    #         states: UP – transitionally DOWN or DOWN – transitionally UP.
    #         If not set, then inter is used.
    #     downinter parameter sets the interval between two consecutive
    #         health checks when the server is in the DOWN state.
    #         If not set, then inter is used.

    # The check option flags a server for periodic healthchecks to ensure
    # that it is available and able receive and send data and take session
    # requests.
    # Server app3 also configures the healthcheck interval to two seconds
    # (inter 2s), the amount of checks app3 has to pass to determine
    # if the server is considered healthy (rise 4),
    # and the number of times a server consecutively fails a
    # check before it is considered failed (fall 3).

{% for s in stats %}
listen stats-{{ s.address | default(default_stats_address) | regex_replace('\*','STAR') | regex_replace('([^a-zA-Z0-9.])', 'X') }}-{{ s.port | default(default_stats_port) }}
    bind {{ s.address | default(default_stats_address) }}:{{ s.port | default(default_stats_port) }}
    # para checks
    monitor-uri /haproxy?status
    stats enable
    stats uri {{ s.uri | default (default_stats_uri) }}
    stats realm {{ s.realm | default(default_stats_realm)  }}
{% for i in s.auth | default(default_stats_auth) %}
    stats auth {{ i.user }}:{{ i.pass }}
{% endfor %}
{% if s.admin | default(default_stats_admin) %}
    # Este admin permite dar de baja backends y otras operaciones
    stats admin if TRUE{% endif %}
{% endfor %}
